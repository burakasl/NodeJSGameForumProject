// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Restrict)
  comments  Comment[]
  reviews   Review[]
  library   Library?   
  isActive  Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Library {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  libraryGames LibraryGame[]
  isActive      Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model LibraryGame {
  id          String   @id @default(uuid())
  libraryId   String
  library     Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  gameId      String
  game        Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  statusId    String
  status      Status    @relation(fields: [statusId], references: [id], onDelete: Restrict)
}

model Game {
  id            String    @id @default(uuid())
  name          String
  releaseDate   DateTime
  description   String
  score     Float
  reviews       Review[]
  imageUrl      String
  libraryGames  LibraryGame[]
  isActive      Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Review {
  id        String    @id @default(uuid())
  userId    String    
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  title     String
  content   String
  score     Float
  comments  Comment[]
  isActive  Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String    @id @default(uuid())
  userId    String    
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId  String
  review    Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  content   String
  isActive  Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Status {
  id          String    @id @default(uuid())
  name        String
  libraryGame LibraryGame[]
}

model Token {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String    @unique
  userRole  String
  createdAt DateTime  @default(now())
}

model Role {
  id         String    @id @default(uuid())
  roleName   String    @unique
  users      User[]
}